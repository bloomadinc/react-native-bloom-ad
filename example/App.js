/**
 * Sample React Native App
 *
 * adapted from App.js generated by the following command:
 *
 * react-native init example
 *
 * https://github.com/facebook/react-native
 */

import React, {useState} from 'react';
import {Platform, StyleSheet, Button, View, Dimensions} from 'react-native';
import {NavigationContainer, useFocusEffect} from '@react-navigation/native';
import {createBottomTabNavigator} from '@react-navigation/bottom-tabs';
import {createStackNavigator} from '@react-navigation/stack';

import BloomAd, {
  BannerView,
  NativeExpress,
  DrawVideo,
  VideoStreaming,
  NewsPortal,
} from 'react-native-bloom-ad';

BloomAd.init('ba0063bfbc1a5ad878');
// .then((res) => {
//   BloomAd.showSplash();
// })
// .catch((error) => {
//   console.log(error);
// });

const ThreeMin = 1000 * 60 * 3;

const {width, height} = Dimensions.get('window');

function HomeScreen() {
  const [play, setPlay] = useState(true);
  useFocusEffect(
    React.useCallback(() => {
      // Do something when the screen is focused
      console.log('focus');
      setPlay(true);
      return () => {
        // Do something when the screen is unfocused
        // Useful for cleanup functions
        console.log('unfocus');
        setPlay(false);
      };
    }, []),
  );

  return (
    <View style={styles.container}>
      <VideoStreaming
        appId="ba0063bfbc1a5ad878"
        style={{
          width: width,
          height: height,
          backgroundColor: 'blue',
        }}
        play={play}
        onChange={(params) => {
          // console.log('params', params);
        }}
      />
    </View>
  );
}

function NewsScreen() {
  const [show, setShow] = useState(false);
  const [reward, setReward] = useState(false);

  return (
    <View style={styles.container}>
      <NewsPortal
        appId="ba0063bfbc1a5ad878"
        style={{
          width: width,
          height: height,
        }}
        onChange={(params, event) => {
          // console.log('params', params.type);
          if (params.type === 'onReadingStart') {
            event.showNews({
              countdownSeconds: 10,
              scrollEffectSeconds: 3,
              rewardData: 5,
            });
          } else if (params.type === 'onReward') {
            event.rewardNews({
              reward: true,
              rewardData: 5,
            });
          }
        }}
      />
    </View>
  );
}

function NewsPageScreen() {
  return (
    <View style={styles.container}>
      <NewsPortal
        appId="ba0063bfbc1a5ad878"
        style={{
          width: width,
          height: height,
        }}
      />
    </View>
  );
}

function SettingsScreen({navigation}) {
  const [showBanner, setShowBanner] = useState(false);
  const [showNative, setShowNative] = useState(false);
  const [showDraw, setShowDraw] = useState(false);

  return (
    <View
      style={styles.main}
      onLayout={(event) => {
        // this.setWindow(event.nativeEvent);
      }}>
      <View style={styles.container}>
        <View style={styles.buttonItem}>
          <Button
            onPress={() => {
              BloomAd.showSplash({
                unitId: 's1',
                time: ThreeMin,
                onAdDismiss(params) {
                  // 广告被关闭
                  console.log(params);
                },
                onError(params) {
                  // 广告出错
                  console.log(params);
                },
              });
            }}
            title="开屏广告"
          />
        </View>
        <View style={styles.buttonItem}>
          <Button
            onPress={() => {
              BloomAd.rewardVideo({
                unitId: 'rv1',
                showWhenCached: false,
                onAdLoad(params) {
                  // 广告加载成功
                  console.log(params);
                },
                onVideoCached(params) {
                  // 视频素材缓存成功
                  console.log(params);
                },
                onAdShow(params) {
                  // 广告页面展示
                  console.log(params);
                },
                onReward(params) {
                  // 广告激励发放
                  console.log(params);
                },
                onAdClick(params) {
                  // 广告被点击
                  console.log(params);
                },
                onVideoComplete(params) {
                  // 广告播放完毕
                  console.log(params);
                },
                onAdClose(params) {
                  // 广告被关闭
                  console.log(params);
                },
                onError(params) {
                  // 广告出错
                  console.log(params);
                },
              });
            }}
            title="激励视频广告"
          />
        </View>
        <View style={styles.buttonItem}>
          <Button
            onPress={() => {
              setShowBanner(!showBanner);
            }}
            title="横幅广告"
          />
          {showBanner && (
            <BannerView
              style={{
                width: 332,
                height: 52,
              }}
              onChange={(params) => {
                console.log(params);
              }}
            />
          )}
        </View>
        <View style={styles.buttonItem}>
          <Button
            onPress={() => {
              setShowNative(!showNative);
            }}
            title="原生广告"
          />
          {showNative && (
            <NativeExpress
              style={{
                width: 332,
                height: 600,
              }}
              count={3}
              onChange={(params) => {
                console.log(params);
              }}
            />
          )}
        </View>

        <View style={styles.buttonItem}>
          <Button
            onPress={() => {
              BloomAd.interstitial({
                unitId: 'i1',
                width: 300,
                onAdLoad(params) {
                  // 广告加载成功
                  console.log(params);
                },
                onAdShow(params) {
                  // 广告页面展示
                  console.log(params);
                },
                onAdClick(params) {
                  // 广告被点击
                  console.log(params);
                },
                onAdClose(params) {
                  // 广告被关闭
                  console.log(params);
                },
                onError(params) {
                  // 广告出错
                  console.log(params);
                },
              });
            }}
            title="插屏广告"
          />
        </View>

        <View style={styles.buttonItem}>
          <Button
            onPress={() => {
              setShowDraw(!showDraw);
            }}
            title="Draw 视频广告"
          />
        </View>

        <View style={styles.buttonItem}>
          <Button
            onPress={() => {
              navigation.navigate('NewsPage');
            }}
            title="news页面"
          />
        </View>

        <View style={styles.buttonItem}>
          <Button
            onPress={() => {
              navigation.navigate('VideoStreaming');
            }}
            title="videoStreaming页面"
          />
        </View>
      </View>
      {showDraw && (
        <DrawVideo
          style={{
            width: '100%',
            height: '100%',
            position: 'absolute',
          }}
          onChange={(params) => {
            console.log(params);
          }}
        />
      )}
    </View>
  );
}

const SettingsStack = createStackNavigator();

function VideoStreamingScreen() {
  return (
    <View style={styles.container}>
      <VideoStreaming
        appId="ba0063bfbc1a5ad878"
        style={{
          width: width,
          height: height,
          backgroundColor: 'blue',
        }}
        play={true}
        onChange={(params) => {
          // console.log('params', params);
        }}
      />
    </View>
  );
}

function SettingsStackScreen() {
  return (
    <SettingsStack.Navigator>
      <SettingsStack.Screen name="Settings" component={SettingsScreen} />
      <SettingsStack.Screen name="NewsPage" component={NewsPageScreen} />
      <SettingsStack.Screen
        name="VideoStreaming"
        component={VideoStreamingScreen}
      />
    </SettingsStack.Navigator>
  );
}

const Tab = createBottomTabNavigator();

export default function App() {
  return (
    <NavigationContainer>
      <Tab.Navigator>
        <Tab.Screen name="Home" component={HomeScreen} />
        <Tab.Screen name="News" component={NewsScreen} />
        <Tab.Screen name="Settings" component={SettingsStackScreen} />
      </Tab.Navigator>
    </NavigationContainer>
  );
}

const styles = StyleSheet.create({
  main: {
    flex: 1,
    position: 'relative',
  },
  container: {
    flex: 1,
    // justifyContent: 'center',
    alignItems: 'center',
    marginTop: 30,
    backgroundColor: '#F5FCFF',
  },
  buttonItem: {
    marginBottom: 30,
    width: 300,
  },
});
